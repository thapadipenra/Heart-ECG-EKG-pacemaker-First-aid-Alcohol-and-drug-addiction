Mysql
SHOW DATABASES;
CREATE DATABASE dipen;
DROP DATABASE dipen;
USE dipen;
SELECT database(); // show your resent use database
//database is just bunch of tables
//Google sql datatype for number, string, date
//varchar(90),int
CREATE TABLE cats (name VARCHAR(100),age INT)
SHOW TABLES;
SHOW COLUMNS FROM cats; or DESC cats;
DROP TABLE cats;
INSERT INTO cats (name, age) VALUES(“ruffoooo”,19);
SELECT * FROM cats; //check all inserted data
INSERT INTO cats (age,name) VALUES (3,”dipen”), (7, “thapa”), (45, “macaw”); //insert many at same query
SHOW WARNINGS; //if there is warning even query is success, if you do invalid like string in int type or char more than max size
//our application have ways of handling those warnings
INSERT INTO cats (name) VALUES (“gaped”);//to explain nulling age ie not specified // INSERT INTO cats () VALUES ();
CREATE TABLE dogs(name VARCHAR(10) NOT NULL, age INT NOT NULL);//if you don’t specify value then error occurs
CREATE TABLE dogs2(name VARCHAR(10) DEFAULT “jabs”, age INT DEFAULT 23);// by default default value is null and specifying not null creates error if values not specified. 
CREATE TABLE dogs2(name VARCHAR(10) NOT NULL DEFAULT “jabs”, age INT NOT NULL DEFAULT 23;//differentiate upper and this query?
CREATE TABLE unique_cats (cat_id INT NOT NULL, name varchar(14), age INT, PRIMARY KEY (cat_id));//creating primary key
CREATE TABLE unique_cats2 (cat_id INT NOT NULL AUTO_INCREMENT, name VARCHAR(15), age INT, PRIMARY KEY (cat_id));//auto increment
CREATE TABLE employees(id INT AUTO_INCREMENT NOT NULL PRIMARY KEY, name INT NOT NULL, status VARCHAR(12) NOT NULL DEFAULT “ENPLOYED”);//2nd way defining primary key
SELECT * FROM employees WHERE name=“DipEN”;// gives name=“dipen” results being SQL case insensitive.
Try selecting before update to know what you update
UPDATE cats SET name=“jabs” where age=12;
DELETE FROM cats WHERE name=“jabs”;//similar to select
DELETE FROM cats;//delete delete all bull shell is still there it is not same as drop

//to run a sql file in terminal
source dipen.sql;
//google mysql dstring functions.  Learn concat, substring, replace, reverse, char_length, upper ,lower  and combination of them.
//google sql formatter to formate long sql you created.
//using DISTINCT gives unique ie only one from redundant.
 SELECT DISTINCT author_lname FROM books;
SELECT author_lname FROM books ORDER BY author_lname DESC;//default ascending order or use ASC.
SELECT title, author_fname,author_lname FROM books ORDER BY author_fname;//ORDER BY 2.
SELECT author_lname, author_fname FROM books ORDER BY author_lname, author_fname;//first sort by lname and if they same then sort by fname or use ORDER BY 1,2
SELECT title FROM books LIMIT 5; // use with order by for must bought book or resent release book or high rated book etc
SELECT title, released_year FROM books ORDER BY released_year DESC LIMIT 2,5;//different starting=2 and ending=5 point, helps in pagination
SELECT title FROM books WHERE title LIKE '%the%’;// in search functionality anythingtheanything wildcard char %=anything


SELECT title,stock_quantity FROM books WHERE stock_quantity LIKE ‘____’;//4 _=4 char long wildcard _=one place, only 1 can fit
//if wildcard in the data and you need to search data then use escape char”\”. Eg: dipen_thapa_scrore_70% becomes ‘%\_%\_%\_%\%’

mysql> select title from books where title like '__\%%';
+-------------+
| title       |
+-------------+
| 10% Happier |
| 10% Happier |
+-------------+

Aggregate:count,avg,sum,min,max.
SELECT COUNT(*) FROM books;
SELECT COUNT(DISTINCT author_lname) FROM books;//count distinct last name
SELECT COUNT(DISTINCT author_lname, author_fname) FROM books;//count distinct author name
SELECT released_date, COUNT(*), MIN(*), MAX(*) ,AVG(*),SUM(*) FROM books GROUP BY released_date;
SELECT MIN(released_year) FROM books;
SELECT author_lname, author_fname avg(pages) FROM books GROUP BY  author_lname, author_fname;

Char(fixed length eg country code, gender), varchar, int, decimal(13,2)= dev 1 choice, float, double=dev 2 choice, date(ymd), time(hms), datetime(ymdhms)=developer choice, 

CURDATE() -gives current date
CURTIME() gives current time
NOW() gives current date time.
Eg:
SELECT CURDATE();
INSERT INTO people (name, birthdate,birthtime, birthdatetime) VALUES (“dipen”, CURDATE(), CURTIME(), NOW());//OR
INSERT INTO people (name, birthdate,birthtime, birthdatetime) VALUES (“dipen”, 1999-12-32, 10:04:35, 1999-12-32 10:04:35);
Get date from database in good formate:
//google date time function format in mysql. Or https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html
Eg: SELECT DAY(birthdate) FROM people; //day is function go to above link for more good function. You can use birthdatetime field for both date and time function. So use datetime. Same above link math function like add date with day, time subtract date, time etc
SELECT DATEDIFF(NOW(), birthdate) as facebook_posted_date FROM people;// OR use below one if need to add or subtract many date time than 2.
SELECT NOW()- birthdate + INTERVAL 3 MONTH + INTERVAL 3 HOUR as facebook_posted_date FROM people;

IMportant: adding timestamp to our tables: TIMESTAMP datatype used mostly in app development, metadata about when something created or updated, standard across programmers, in mysql TIMESTAMP is also data type.
DATETIME vs TIMESTAMP=both store date and time.
Timestamp works between date 1970 to 2038 ie if someone born before 1970 it cannot be worked or converted to or stored as timestamp.
While DATETIME works between dates 1000 to 9999 so it works for all dates. But saving right now dates timestamp is used must often.
As timestamp uses less space than datetime. 
Eg CREATE TABLE comments (content VARCHAR(100), created_at TIMESTAMP DEFAULT NOW() ON UPDATE CURRENT_TIMESTAMP);// you may also use DATETIME data time which use more space. You can also use NOW() in place of CURRENT_TIMESTAMP both gives same.

LOGICAL operators: AND, OR, !=, >, >=,<,<=NOT LIKE OPPOSITE OF LIKE using wildcard %,_, LOGICAL &&(AND) both works,  ||(OR) both works, BETWEEN eg birthday between(you can use AND, <,>,=as alternative of BETWEEN),   NOT BETWEEN, IN operator code below, NOT IN

SELECT 99>1; what’s the o/p? ans=1
SELECT name FROM people WHERE dateofbirth BETWEEN 2000 AND 2022;//dateofbirth>=2000 && dateofbirth <=2022// NOT BETWEEN also there

CAST() function in sql allows convert one data type to another eg DATE to DATETIME so we can do operation on different data type.
 SELECT CAST(”2017-1-1” AS DATETIME); converts string to datetime.

SELECT title FROM books WHERE author=“dipen” OR author=“nepid” OR author=“thapa”;// you can use IN operator
 SELECT title FROM books WHERE author IN (“dipen”, “nepid”, “thapa”); //using IN operator.  // NOT IN rather using != AND many time like = or for IN as above code.
% operator eg where date % 2=0 ie if even odd etc.

CASE STATEMENT IN SQL:
    SELECT title, release_date, 
    				CASE 
					WHEN release_date>=2000 THAN “modern_lit”
					ELSE “20th century”
				END AS genre 
  FROM books;// here new field(column) genre added with two possible string as value.

SELECT title, 
       CASE 
          WHEN stock_quantity BETWEEN 0 AND 50 THAN “*”
          WHEN stock_quantity BETWEEN 51 AND 100 THAN “**”
          ELSE “***”
      END AS rating FROM books;


RELATIONSHIP AND JOINS
—IMPLICITE INNER JOINT
SELECT first_name, last_name, order_date, amount FROM customers, orders WHERE customers.id=orders.customer_id; 
—EXPLICIT INNER JOINT —better way//joint by default inner joint and all the time we use it
SELECT * FROM customers JOIN orders ON customers.id=orders.customer_id; 
—LEFT JOINT==use left joint in place of joint in upper inner joint
—RIGHT JOIN




    



 

















 













 









