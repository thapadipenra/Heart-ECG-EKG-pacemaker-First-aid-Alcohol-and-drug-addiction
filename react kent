REACT KENT
YouTube channel
https://www.youtube.com/c/SonnySangha/featured papa react
https://www.youtube.com/c/Codevolution/videos best channel

In modern applications you’ll get React and React DOM files from a "package registry" like npm (react and react-dom). But for these first exercises, we’ll use the script files
which are available on unpkg.com and regular script tags so you don’t have to bother installing them. So in the exercise you’ll be required to add script tags for these files.

http://localhost:3000/isolated/exercise/02.html
React and reactDOM are separate as react can be used for multiple platform, reactDOM for rendering in web. And react creating elements acts as creating DOM in vanilla.
Use react for all platform and rendering platform specific package(eg reactDOM here).
React and reactDOM here act as global document in vanilla.
As react exposes UMD(universal model definition) so allow to create global variable can be accessed in browser console or inside of our code.
Jsx is not js so, need compiler babel act as compiler.

const ui = <h1 id="greeting">Hey there</h1>

// ↓ ↓ ↓ ↓ compiles to ↓ ↓ ↓ ↓ go to babel playground to convert above to below code.

const ui = React.createElement('h1', {id: 'greeting', children: 'Hey there'})

{z} in jsx, z should return value, cannot be statement but expression
Children prop. Put anything maybe whole app in children.
React want to keep track what removed or added in list so, key prop. Use index if you not changing list else don’t use index.
Google reat events
Named vs default export.
Netlify host=>drag drop build folder.
Only have component with some static data eg list. React hooks for rendering dynamic content. Eg dynamic list.
Index.css as all component will consolidate at index so, only one css file even many components js files.
Change value using onClick function and component don’t pre-render, so useState to re-render.
Rules to use hooks(either react or custom hooks) useHooks 1> component name during function init start with uppercase, 2> always use hooks inside component/function body, 3>cannot call conditionally, Means if(condition){} you cannot use hooks in place of condition.

useEffect hook allows you to do side effect(data fetch, document.title update, setting event listener for listening events, sign up for subscriptions etc). sideEffect means any work outside of the component. 1> By default useEffect run after every re-render, 2> clean-up function
3> second parameter

{no statement like if{} else{}, while etc only expression like string.toUpperCase(), map(),etc} as in statement like if else another {} to return value makes no sense.
Eg if compiled to React.createElement(‘<div>’, null, if(p=2){}) putting as argument to function call gets no sense.
Expression is something that evaluates to value and statement is something that have some logic you apply to your program using curly braces. Function call is expression while making function is statement. Creating variable is statement you can’t use in JSX while you can use variable as expression which is already created outside jsx. One exception statement can be used inside call back function of some function like map( callback{statement}). You can do ternaries(rather than statement if else as there is no {}), &&, || as they make good expression. Or use if else like this…{interpolation} eg of interpolation you do in string literal passing javascript similarly do interpolation using javascript expression inside JSX.
￼
￼
Example of interpolation of two expression as a functions(not custom component as not start with cap letter) using function & creactElement API call with destruct children props.
￼

Example using reusable custom component(should start with cap letter) in JSX:<custom comp …props>{children}<custom comp/>.
￼

UDEMY:
<React.StrictMode> in app.js render twice. Don’t use it to render once.
useEffect used to do some work outside the component. Console log can also be taken as side effect so log inside side effect.
useState do two thing 1>it preserve the value between renders 2>it trigger re-renders.
We cannot place hooks inside conditional eg cannot do if(v>3){useEffect(()=>{})} but can use if else inside useEffect.
IMPORTANT FOR USE EFFECT,
1>useEffect takes two parameter 1st one is call back function run’s on every render and re-render if there is no second parameter which is dependency list.
2>if dependency list(second parameter) is empty array ie [] then useEffect runs only on first(initial) render. And don’t ever run on re renders after that.
3>all value in dependency array [data, fetchedData, value] are state value if any of them changes, they trigger re-renders and trigger useEffect to run.
4>cleanup function is very imps when we start demeaning with component appearing and disappearing. There will be time when component are displayed and then removed.
5>imps rule you cannot make useEffect call back function async to use it as promise ie no async await call back function so use separate function for that and call from callback function. Use [] or [dependency] to get rid of infinite loop. As async await returns promise but useEffect looking for clean up function to return not callback.

In component if you don’t return anything/ return undefined the it will give issue.

Short circuit evaluation a || b ,a && b, in or case if first is true always return first and if first is false always return second. In cause of and operator it’s opposite to or ie if first is true always return second else return first. New case !a && b.
Ternary expression as we can’t use if inside return as it doesn’t return value.

Mouse events onClick, onContextMenu, onDoubleClick, onDrag, onDragEnd, onDragEnter, onDragExit, onDragLeave, onDragOver, onDragStart, onDrop, onMouseDown, onMouseEnter, onMouseLeave, onMouseMove, onMouseOut, onMouseOver, onMouseUp
Keyboard events onKeyDown, onKeyPress, onKeyUp
Clipboard events onCopy, onCut, onPaste
Form events onChange, onInput, onSubmit, onClick
Focus events onFocus, onBlur
Touch events onTouchCancel, onTouchEnd, onTouchMove, onTouchStart
UI events onScroll
Wheel events onWheel
Selection events onSelect
Image events onLoad, onError
Animation events onAnimationStart, onAnimationEnd, onAnimationIteration
Transition events onTransitionEnd
For controlled input you hooking up your input to state value and we will learn uncontrolled input in useRef.
When it comes to react form submit, we have two option either use onSubmit on form or onClick on the button.
When we click button or press return, by default browser try to submit form and refresh page .
Prevent default behavior, we will deal with this data on our own then browser does not refresh the page because refresh re-renders the page and clear states we set, we don’t want that.
{/_can also remove onSubmit in form and add onClick={handleSubmit} in button make sure type submit in button_/}
Dynamic Object Properties in JavaScript google {[property]:value }
useRef for targeting any DOM element and changing it’s attribute or children(value).
For here we use useRef for targeting input element and taking it’s input as uncontrolled input similarly how you do in javascript I.e. not controlled by state.
useRef preserves value between renders just like useState but don’t trigger re-render like useState, useRef used for targeting DOM element.
We can focus() our input the moment our app renders .
If you know useReducer it is easy to pick up redux as similar for more complex states.
Const [state, dispatch]=useReducer(reducer)
If we want to do something with that whole state, we use dispatch function returned by useReducer. Here reducer function takes in old state and do something called action and spit back new state.reducer function takes two args state(old) and action. Reducer function manipulate state and it’s happens once we call dispatch or once we dispatch the action on initial state.
In order to affect anything in state we need to call dispatch function with action as argument(is obj with property type). Once you dispatch then in reducer function you need to handle it. And on reducer you always need to return some kind of state either updated or not.
When you dispatch it goes to reducer for that action.
If your are dispatching certain action which you not catching(having) in reducer, you can return original default state or throw error.
Prop drilling is one way use context fixes that. Context API and of context hook is new way to access that context.
Prop drilling is bad thing not a good solution as it need to pass through unwanted components so context API or Redux are used.
How context API as well as useContext works?

When we create our own custom hooks you need to use the use eg useFetch in GitHub customs hooks. This is because we made hooks using hooks like useState and useEffect and we are not allowed to use hooks inside regular function so, either function need to be a component starting with uppercase or need to be custom hook starting with use.

PROP TYPES:
Prop type used to validate our props ie props that we pass into our component.

PERFORMANCE OPTIMIZATION:
React.memo func , useCallback hook , useMemo hook
React is fast by default, optimizations add their own cost.
Memoization term =using memo catches so no render.
useCallback does something similar we doing with React.memo.

Rather using font awesome(can), use react-icons(npm install).
https://react-icons.github.io/react-icons/
https://react-icons.github.io/react-icons/icons?name=fa
React icons have font awesome inclusive.
Use your own className and make css for the sag icon.
Stripe vs strapi , pay vs headless css.

https://api.github.com/users/nepidmobe
https://www.turing.com/jobs?s=na_organic_facebook-post_developer&n=organic&utm_source=na_organic_facebook-post_developer&utm_medium=organic

felony, snooping, morsel, lineage, forfeit, arena, giggle, origami, witty, reminiscing, sanction, errands, coalesce, skimming, discrepancy,

oncologist
ultrasound=1000
MRI=5000-8000
endoscopy=1000-1500
biopsy=1000-2000
CT scan=4000

Emmet viscose foe html mot working.
Html is white space collapsing.
<img src=“” width=“60(absolute)/20%(relative)” alt=“”/>
Using width and height still loading big image and cropping(displaying portion rather cropping) at client side so , crop using Mac preview tool adjust width and height and reduce ima size and no need to use width and height as above anymore. This preview tool have adjust size in tools, it by default lock height and as we change width height is auto adjusted.
Links within same page with smooth scrolling. Linked by id and #id
<a href=“” target=“_blank”></a> handfinger curser.
Empty link image link… empty link don’t lead us anywhere for this href=‘#’
Sup and sub element eg <h1>dipped<sup>thapa</sup>is <sub>wow</sub></h1> ..to display above and below from common line.
Strong and em elements to text turn bold and slanted respectively. Can be done with css.
Html special character code google and use.
ul,ol, unordered list vs ordered list. ul used in navigation. Nested list. text area, Table, radio button(checked attribute), checkbox(checked attribute), select inputs.
Shortcuts:
￼

command+D=select instance(multiple)
Option +up/down =move the line up/down
option+left/right, command +up/down , command + up/down.
Google html head.
Selectors css: element, classes, id.
Colon and semi-colon and dash are imp inside declaration block containing prop and values h2{ font-size:30px;}
Grouping selector h1,h2,p{} or use class selectors.
Multiple classes+id for same element. Id must be unique while class can be added on many element.
Div vs span :div element used to group multiple element and span element used to group inline content.
Css property: text-transform: uppercase; line-height:20px; font-family:”monotone”;
All children inherit style from parent unless they have their own style. Inheritance.
Last rule wins and Specificity, universal selector(\*). Class has more specificity than element but less specific than id. Universal selector less specific selector.
We use universal selector when we override the default browser styles. We don’t want this styles and later make specific styles for those elements.
